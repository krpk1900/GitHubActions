name: git-pr-release
on:
  push:
    branches:
      - "release/**"
jobs:
  git-pr-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Ruby 3.1
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 3.1
      - name: Set up Branch Name
        id: vars
        run: echo "::set-output name=branch_name::${GITHUB_REF#refs/heads/}"
      - name: Check for PR from current branch to release/** and set branch name
        id: check_branch
        run: |
          CURRENT_BRANCH=${{ steps.vars.outputs.branch_name }}
          PR_DATA=$(gh pr list --base release/** --head $CURRENT_BRANCH --json baseRefName --jq '.[0].baseRefName')
          if [[ -n "$PR_DATA" ]]; then
            echo "Found PR from $CURRENT_BRANCH to $PR_DATA"
          else
            echo "No PR found from $CURRENT_BRANCH to release/**. Setting to master"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: gem install --no-document git-pr-release
      - name: Run git-pr-release and capture output
        id: gitpr
        run: |
          git-pr-release 2>&1 | tee output.txt
          echo "::set-output name=exit_code::$?"
        continue-on-error: true
        env:
          GIT_PR_RELEASE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_PR_RELEASE_BRANCH_PRODUCTION: ${{ steps.check_branch.outputs.branch_name }} #main
          GIT_PR_RELEASE_BRANCH_STAGING: ${{ steps.vars.outputs.branch_name }}
          GIT_PR_RELEASE_LABELS: リリース用
          GIT_PR_RELEASE_TEMPLATE: .github/RELEASE_PULL_REQUEST_TEMPLATE.erb
      - name: Check for specific error message
        id: check
        run: |
          if [[ "${{ steps.gitpr.outputs.exit_code }}" == "0" ]]; then
            echo "git-pr-release succeeded, setting job status to succeed."
            echo "::set-output name=status::succeed"
          elif grep -q "No pull requests to be released" output.txt; then
            echo "Found the specific error, setting job status to succeed."
            echo "::set-output name=status::succeed"
          else
            echo "Did not find the specific error or success, setting job status to fail."
            echo "::set-output name=status::fail"
          fi
      - name: Conditionally fail the job
        run: |
          if [[ "${{ steps.check.outputs.status }}" == "fail" ]]; then
            exit 1
          fi
